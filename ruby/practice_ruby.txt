===========================================================Ruby Practice====================================================
1. Object oriented programming language:

    Data Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance


3.variable :

	1.Local variable: define in a methods,not available outside the methods,begine with lowercase letter or '_'
	2.instance variable:available across the methods for any particular instance that means instance variable change object to object.
					denoted like : @variablename
	3.class variable:Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a cl                        ass. They are preceded by the sign @@ and are followed by the variable name.
	4.global variable: Class variables are not available across classes. If you want to have a single variable, which is available across classes,				 you need to define a global variable. The global variables are always preceded by the dollar sign ($).


2.Methods:
 
how to define :

 class Sample
    def hello                     #this is the definition of a methods. 
        puts "method learning"
    end
end                               #termination of class.

object  = Sample. new
object.hello

output : ruby classcust.rb
method learning


3.Methods and class 

$global_variable = 10
class Class1
  def print_global
    puts "Global variable in class 1 is #$global_variable"
  end
end

class Class2
  def print_global
    puts "Global variable in class 2 #$global_varible is #$global_variable"
  end
end

class1Object = Class1.new
class1Object.print_global
class2Object = Class2.new
class2Object.print_global


4.classes and object practice :
  variable practice:

code : 

$globalVariable = 10            # global variable defination here

class Sample                      # class is deinfined here

  @@class_variable = 100          # class variable
  def methodscall(val1,val2,val3)
    @value_call_first = val1
    @value_call_second = val2
    @value_call_third = val3
    puts "methods var "
    local_variable = "I am local" # local variable is here
    puts "local variable data :  #local_variable"
  end

end

object = Sample.new
object.methodscall(1,"calling","Great")
puts "global variable : #$globalVariable"

output : ruby program.rb 
methods var 
local variable data :  #local_variable
global variable : 10


5. Method calling 

code : class Sample                      # class is deinfined here
   
  # instance variable example how I can call them
  def methodscall(val1,val2,val3)
    @value_call_first = val1
    @value_call_second = val2
    @value_call_third = val3

  puts "value for val1 : #@value_call_first"
  puts "value for val2 : #@value_call_second"
  puts "value for val2 : #@value_call_third"
  end
  
end

object = Sample.new
object.methodscall("1","calling","Great")


output : 

ruby customclass.rb 
value for val1 : 1
value for val2 : calling
value for val2 : Great


6. class variable

class Customer
   @@no_of_customers = 0
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
   def total_no_of_customers()
      @@no_of_customers += 1
      puts "Total number of customers: #@@no_of_customers"
   end
end

# Create Objects
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

# Call Methods
cust1.total_no_of_customers()
cust2.total_no_of_customers()

output : 
ruby classvariable.rb 
Total number of customers: 1
Total number of customers: 2


7. Instance Variable 

class Customer
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
end

# Create Objects
cust1 = Customer.new("1", "Aman", "Faridabad")
cust2 = Customer.new("2", "Neha", "Delhi")

# Call Methods
cust1.display_details()
cust2.display_details()

output : 

ruby instancevariable.rb 
Customer id 1
Customer name Aman
Customer address Faridabad
Customer id 2
Customer name Neha
Customer address Delhi

8. Global variable :

code :

$global_variable = 10
class Class1
   def print_global
      puts "Global variable in Class1 is #$global_variable"
   end
end
class Class2
   def print_global
      puts "Global variable in Class2 is #$global_variable"
   end
end

class1obj = Class1.new
class1obj.print_global
class2obj = Class2.new
class2obj.print_global

ruby globalvar.rb 
Global variable in class 1 is 10
Global variable in class 2  is 10

=========================================================Conditional statements=============================================================

1.If statement: 
syntax : 

	if conditional [then]
   		code...
	[elsif conditional [then]
   		code...]...	
	[else
   		code...]
	end
example : x = 1
if x > 2
   puts "x is greater than 2"
elsif x <= 2 and x!=0
   puts "x is 1"
else
   puts "I can't guess the number"
end


2. if modifier:

syntax : code if condition

code : 
$debug = 1
print "debug\n" if $debug


3.Ruby Unless statement:

syntax : 

unless conditional [then]
   code
[else
   code ]
end

code : 

x = 1
unless x>=2
 puts "x is less than 2"
else
 puts "x is greater than 2"
 
 4.switch statement:
 
 syntax : 
 case expr0
when expr1, expr2
   stmt1
when expr3, expr4
   stmt2
else
   stmt3
end

code : 

$age =  5
case $age
when 0 .. 2
   puts "baby"
when 3 .. 6
   puts "little child"
when 7 .. 12
   puts "child"
when 13 .. 18
   puts "youth"
else
   puts "adult"
end


output : little child

============================================================loop=======================================================
1.while loop:

syntax : 
while conditional [do]
   code
end

code : 

$i = 0
$num = 5

while $i < $num  do
   puts("Inside the loop i = #$i" )
   $i +=1
end

2.while modifier:

syntax : 

code while condition

OR

begin nu
  code 
end while conditional

code : 
$i = 0
$num = 5
begin
   puts("Inside the loop i = #$i" )
   $i +=1
end while $i < $num

3. Untill statement:

syntax : 
until conditional [do]
   code
end

code : 

$i = 0
$num = 5

until $i>$num
  puts "inside the loop until i = #$i"
  $i+=1
end

=begin 
output:
inside the loop until i = 0
inside the loop until i = 1
inside the loop until i = 2
inside the loop until i = 3
inside the loop until i = 4
inside the loop until i = 5

=end

4.until modifier:

syntax :

code until conditional

OR

begin
   code
end until conditional

code : 
$i=0
$num = 10

begin
  puts "inside the loop i = #$i"
  $i+=1
end until $i>$num

=begin 

output: 

inside the loop i = 0
inside the loop i = 1
inside the loop i = 2
inside the loop i = 3
inside the loop i = 4
inside the loop i = 5
inside the loop i = 6
inside the loop i = 7
inside the loop i = 8
inside the loop i = 9
inside the loop i = 10
=end

5.Ruby statements:

syntax : 
for variable [, variable ...] in expression [do]
   code
end

code :
 for i in 0..10
  puts "values of local variable is #{i}"
end

=begin 
output :

values of local variable is 0
values of local variable is 1
values of local variable is 2
values of local variable is 3
values of local variable is 4
values of local variable is 5
values of local variable is 6
values of local variable is 7
values of local variable is 8
values of local variable is 9
values of local variable is 10


=end 
6.Break statement:

syntax : break 

code : 
for i in 0..5
  if i > 2 then
    break
  end
  puts"values of local variable is #{i}"
end

=begin 
output:

values of local variable is 0
values of local variable is 1
values of local variable is 2

=end
7.next : Jumps to the next iteration of the most internal loop. Terminates execution of a block if called within a block (with yield or call returning nil).

syntax : next

code : 
for i in 0..5
  if i<3 then
    next
  end
  puts "value of local variable is #{i}"
end

=begin
output:

value of local variable is 3
value of local variable is 4
value of local variable is 5

=end

8.redo : Restarts this iteration of the most internal loop, without checking loop condition. Restarts yield or call if called within a block.

syntax : redo 

code :

for i in 0..5
  if i<2 then
    puts"vale of local variable is #{i}"
    redo
  end
end

=begin
output :

vale of local variable is 0
vale of local variable is 0
vale of local variable is 0
vale of local variable is 0
vale of local variable is 0
.......................... infinite loop
=end

9.retry : If retry appears in rescue clause of begin expression, restart from the beginning of the begin body.

syntax : retry

code : 

for i in 0..10
        begin
                puts "VALUE OF i #{i}"
                raise if i >=9
                rescue
                retry
        end
end

=begin
output: 

infinite loop
=end

=================================================Ruby Methods================================================= 
Ruby methods are very similar to functions in any other programming language. Ruby methods are used to bundle one or more repeatable statements into a single unit.

Method names should begin with a lowercase letter. If you begin a method name with an uppercase letter, Ruby might think that it is a constant and hence can parse the call incorrectly.

Methods should be defined before calling them, otherwise Ruby will raise an exception for undefined method invoking.

Syntax :

1.simple method syntax With no parameter :
 
	def method_name 
          expr..
	end

2.You can represent a method that accepts parameters like this :
	
	def method_name (var1, var2)
  	  expr..
	end
3.You can set default values for the parameters, which will be used if method is called without passing the required parameters :

	def method_name (var1 = value1, var2 = value2)
	   expr..
	end
	
4.Whenever you call the simple method, you write only the method name as follows:
	
	method_name
	
5.when you call a method with parameters, you write the method name along with the parameters, such as 

	method_name 25, 30


6.Return Values from Methods:

Every method in Ruby returns a value by default. This returned value will be the value of the last statement. For example

methdo: 

def return_method
  i = 1
  j = 2
  k =100
end

will return the last declare variable k

7.Ruby return Statement: The return statement in ruby is used to return one or more values from a Ruby Method.

syntax : return [expr[`,' expr...]]


If more than two expressions are given, the array containing these values will be the return value. If no expression given, nil will be the return value.


Example : return   or   return 1,2,3    or  return 13


8.Variable Number of Parameters

def sample(*test)
  puts"the number of parameter is : #{test.length}"
  for i in 0...test.length
    puts "The parameters are : #{test[i]}"
  end
end
sample "Aman","6","M"
sample "Niharika","7","F"

=begin
output:
ruby  variable_num_parameter.rb
the number of parameter is : 3
The parameters are : Aman
The parameters are : 6
The parameters are : M
the number of parameter is : 3
The parameters are : Niharika
The parameters are : 7
The parameters are : F

=end

13.class Methods:When a method is defined outside of the class definition, the method is marked as private by default. On the other hand, the methods defined in the class definition are marked as public by default. The default visibility and the private mark of the methods can be changed by public or private of the Module.

Whenever you want to access a method of a class, you first need to instantiate the class. Then, using the object, you can access any member of the class.

Ruby gives you a way to access a method without instantiating a class. Let us see how a class method is declared and accessed 


code : 

class Accounts
   def reading_charge
   end
   def Accounts.return_date
   end
end


See how the method return_date is declared. It is declared with the class name followed by a period, which is followed by the name of the method. You can access this class method directly as follows −

							Accounts.return_date

To access this method, you need not create objects of the class Accounts.

=========================================================Blocks========================================
A block consists of chunks of code.
You assign a name to a block.
The code in the block is always enclosed within braces ({}).
A block is always invoked from a function with the same name as that of the block. This means that if you have a block with the name test, then you use the function test to invoke this block.
You invoke a block by using the yield statement.


Syntax : 

block_name {
   statement1
   statement2
   ..........
}


example :
 def test
  puts"you are in the method"
  yield
  puts"you are again in the method"
  yield
end
test {
  puts"you are in the block"
}


=begin
output:

you are in the method
you are in the block
you are again in the method
you are in the block

=end

Example :

def test
  yield 5
  puts "You are in the method test"
  yield 100
end
test{
  |i| puts"You are in the block #{i}"
}

=begin
output :

ruby yieldtest.rb
You are in the block 5
You are in the method test
You are in the block 100

=end


Example :
If you want to pass more than one parameters, then the yield statement becomes −

yield a, b

and the block is −

test {|a, b| statement}


1.Blocks and Methods:

def test
  yield
end
test{

  puts "Hello world"
}
test{
  puts "HI another block"
}

=begin 
output:

ruby  block_and_methods.rb
Hello world
HI another block
=end

2.Begin and End block : Every Ruby source file can declare blocks of code to be run as the file is being loaded (the BEGIN blocks) and after the program has finished executing (the END blocks).



BEGIN {
  # begin block code
  puts "BEGIN code block"
}
END {
  
  #END block code
  puts "END code block"
  
}

#MAIN block code
puts "MAIN code block"


=begin
output :

BEGIN code block
MAIN code block
END code block

=end


======================================================================Modules=========================================================
1.Modules are a way of grouping together methods, classes, and constants. Modules give you two major benefits.

    Modules provide a namespace and prevent name clashes.

    Modules implement the mixin facility.

Modules define a namespace, a sandbox in which your methods and constants can play without having to worry about being stepped on by other methods and constants.
Syntax

module Identifier
   statement1
   statement2
   ...........
end

2.Ruby require Statement

The require statement is similar to the include statement of C and C++ and the import statement of Java. If a third program wants to use any defined module, it can simply load the module files using the Ruby require statement −
Syntax

require filename

3.Ruby include Statement

You can embed a module in a class. To embed a module in a class, you use the include statement in the class −
Syntax

include modulename

If a module is defined in a separate file, then it is required to include that file using require statement before embedding module in a class.


module.rb

module Usefull
  def sayhi(name)
    puts"Hello How are you #{name}"
  end
  def saybye(name)
    puts"By By see you again #{name}"
  end
end

require.rb

require_relative "module.rb"
include Usefull

Usefull.sayhi("Aman")
Usefull.saybye("Rohit")
=begin 
output:

Hello How are you Aman
By By see you again Rohit

=end 

4.Mixin : ruby does't support multiple inheritence directly but we can using mixin It is a concept not keyword.

#module A
module A
  def a1
    puts "we are in a1 method of module A"
  end

  def a2
    puts "we are in a2 method of module B"
  end

end
#module B
module B
  def b1
    puts "we are in b1 module of B"
  end

  def b2
    puts "we are in b2 module of B"
  end

end

class Sample
  include A
  include B
end

s = Sample.new
s.a1
s.a2
s.b1
s.b2
                                                                                                                                    1,1           Top


ruby mixin.rb
we are in a1 method of module A
we are in a2 method of module B
we are in b1 module of B
we are in b2 module of B

==============================String==================================
1.Expression Substitution
x,y,z = 12,36,72
puts "The value of x is #{x}"
puts "The value of x and y is #{x + y}"
puts "The average was #{(x+y+z)/3}"

=begin 
ruby expression.rb

The value of x is 12
The value of x and y is 48
The average was 40

=end

2.General Delimited Strings

%{Ruby is fun.}  equivalent to "Ruby is fun."
%Q{ Ruby is fun. } equivalent to " Ruby is fun. "
%q[Ruby is fun.]  equivalent to a single-quoted string
%x!ls! equivalent to back tick command output `ls`


2.string builtin:

We need to have an instance of String object to call a String method. Following is the way to create an instance of String object −

new [String.new(str = "")]

code : 
myStr = String.new("THIS IS TEST")
foo = myStr.downcase

puts "#{foo}"

output : this is test

====================================================Array================================================
1.Declaring and defining of Array 

#calculating size of the array and learning 
#and creating and defining of array 

name  =  Array.new(20)
puts name.size #this return 20
puts name.length #this also returns 20


2.Assigning values through array '

names = Array.new(4,"mac")
puts "#{names}"

=begin 
ruby assigning_values.rb
["mac", "mac", "mac", "mac"]
=end 
--------------------------------
nums  =Array.new(10) { |e| e = e*2}
puts "#{nums}"

=begin 
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

=end

3.

=========================================27th October==============================================================

1.Hashes : Hash is the collection of key and value pair.

syntax :			 months = Hash.new

You can also use new to create a hash with a default value, which is otherwise just nil −

			    months = Hash.new( "month" )

					or

			    months = Hash.new "month"

When you access any key in a hash that has a default value, if the key or value doesn't exist, accessing the hash will return the default value 

2.Time and Date : to show date and time in ruby there is multiple functionality available in  ruby.

3.Ranges:Ranges occur everywhere: January to December, 0 to 9, lines 50 through 67, and so on. Ruby supports ranges and allows us to use ranges in a variety of ways −

    Ranges as Sequences
    Ranges as Conditions
    Ranges as Intervals
 
 example:    
 (1..5)        #==> 1, 2, 3, 4, 5
(1...5)       #==> 1, 2, 3, 4
('a'..'d')    #==> 'a', 'b', 'c', 'd'



4.Iterators:terators are nothing but methods supported by collections. Objects that store a group of data members are called collections. In Ruby, arrays and hashes can be termed collections.
Syntax

1.each iterator:
		collection.each do |variable|
   			code
		end

2.Collect iterator:
syntax :
	collection = collection.collect



5.File I/O: Ruby provides a whole set of I/O-related methods implemented in the Kernel module. All the I/O methods are derived from the class IO.

1.puts : The puts statement instructs the program to display the value stored in the variable. This will add a new line at the end of each line it writes.
Example


#!/usr/bin/ruby

val1 = "This is variable one"
val2 = "This is variable two"
puts val1
puts val2
 
output:

This is variable one
This is variable two
2.get : The gets statement can be used to take any input from the user from standard screen called STDIN.
Example

The following code shows you how to use the gets statement. This code will prompt the user to enter a value, which will be stored in a variable val and finally will be printed on STDOUT.



puts "Enter a value :"
val = gets
puts val

This will produce the following result −

Enter a value :
This is entered value
This is entered value

3.putc :Unlike the puts statement, which outputs the entire string onto the screen, the putc statement can be used to output one character at a time.
Example

The output of the following code is just the character H −
Live Demo



str = "Hello Ruby!"
putc str

This will produce the following result −

H

4.print :The print statement is similar to the puts statement. The only difference is that the puts statement goes to the next line after printing the contents, whereas with the print statement the cursor is positioned on the same line.
Example


print "Hello World"
print "Good Morning"

This will produce the following result −

Hello WorldGood Morning

=========================================28th oct ========================================================
-------------------------------Exception Handling------------------------------------------------------
The execution and the exception always go together. If you are opening a file, which does not exist, then if you did not handle this situation properly, then your program is considered to be of bad quality.

The program stops if an exception occurs. So exceptions are used to handle various type of errors, which may occur during a program execution and take appropriate action instead of halting program completely.

Syntax :

begin  
# -  
rescue OneTypeOfException  
# -  
rescue AnotherTypeOfException  
# -  
else  
# Other exceptions
ensure
# Always will be executed
end

example :

begin
   file = open("/unexistant_file")
   if file
      puts "File opened successfully"
   end
rescue
      file = STDIN
end
print file, "==", STDIN, "\n"

output: #<IO:0xb7d16f84>==#<IO:0xb7d16f84>

2.Using retry Statement

You can capture an exception using rescue block and then use retry statement to execute begin block from the beginning.
Syntax

begin
   # Exceptions raised by this code will 
   # be caught by the following rescue clause
rescue
   # This block will capture all types of exceptions
   retry  # This will move control to the beginning of begin
end

Example



begin
   file = open("/unexistant_file")
   if file
      puts "File opened successfully"
   end
rescue
   fname = "existant_file"
   retry
end

3.Using raise Statement

You can use raise statement to raise an exception. The following method raises an exception whenever it's called. It's second message will be printed.
Syntax

raise 

OR

raise "Error Message" 

OR

raise ExceptionType, "Error Message"

OR

raise ExceptionType, "Error Message" condition



example :

begin  
   puts 'I am before the raise.'  
   raise 'An error has occurred.'  
   puts 'I am after the raise.'  
rescue  
   puts 'I am rescued.'  
end  
puts 'I am after the begin block.'  

This will produce the following result −

I am before the raise.  
I am rescued.  
I am after the begin block.  

4.Using ensure Statement

Sometimes, you need to guarantee that some processing is done at the end of a block of code, regardless of whether an exception was raised. For example, you may have a file open on entry to the block and you need to make sure it gets closed as the block exits.

Syntax

begin 
   #.. process 
   #..raise exception
rescue 
   #.. handle error 
ensure 
   #.. finally ensure execution
   #.. This will always execute.
end

Example

begin
   raise 'A test exception.'
rescue Exception => e
   puts e.message
   puts e.backtrace.inspect
ensure
   puts "Ensuring execution"
end

output −

A test exception.
["main.rb:4"]
Ensuring execution

5.Using else Statement

If the else clause is present, it goes after the rescue clauses and before any ensure.

The body of an else clause is executed only if no exceptions are raised by the main body of code.
Syntax

begin 
   #.. process 
   #..raise exception
rescue 
   # .. handle error
else
   #.. executes if there is no exception
ensure 
   #.. finally ensure execution
   #.. This will always execute.
end

Example


begin
   # raise 'A test exception.'
   puts "I'm not raising exception"
rescue Exception => e
   puts e.message
   puts e.backtrace.inspect
else
   puts "Congratulations-- no errors!"
ensure
   puts "Ensuring execution"
end

output −

I'm not raising exception
Congratulations-- no errors!
Ensuring execution

6.Catch and Throw

While the exception mechanism of raise and rescue is great for abandoning the execution when things go wrong, it's sometimes nice to be able to jump out of some deeply nested construct during normal processing. This is where catch and throw come in handy.

The catch defines a block that is labeled with the given name (which may be a Symbol or a String). The block is executed normally until a throw is encountered.

Syntax

throw :lablename
#.. this will not be executed
catch :lablename do
#.. matching catch will be executed after a throw is encountered.
end

OR

throw :lablename condition
#.. this will not be executed
catch :lablename do
#.. matching catch will be executed after a throw is encountered.
end

Example

The following example uses a throw to terminate interaction with the user if '!' is typed in response to any prompt.

def promptAndGet(prompt)
   print prompt
   res = readline.chomp
   throw :quitRequested if res == "!"
   return res
end

catch :quitRequested do
   name = promptAndGet("Name: ")
   age = promptAndGet("Age: ")
   sex = promptAndGet("Sex: ")
   # ..
   # process information
end
promptAndGet("Name:")

output:
Name: Aman
Age: 23
Sex: Male
Name:Ruby
======================================Hash Class Methods==========================================
1.any :Returns true if any element satisfies a given criterion; false otherwise.
With no argument and no block, returns true if self is non-empty; false if empty.
With argument object and no block, returns true if for any key key h.assoc(key) == object:

any? → true or false click to toggle source
any?(object) → true or false
any? {|key, value| ... } → true or false



3.0.2 :002 > h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :003 > h.any?
 => true 
3.0.2 :004 > h.any?([:bar,1])
 => true 
3.0.2 :005 > h.any?([:bar,0])
 => false 
3.0.2 :006 > h.any?([:bar,1])
 => true 
3.0.2 :007 > h.any?{|key,value|value<3}
 => true 
3.0.2 :008 > h.any?{|key,value|value>3}
 => false 

2. assoc(key) → new_array or nil click to toggle source

If the given key is found, returns a 2-element Array containing that key and its value:

3.0.2 :001 > h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :002 > h.assoc(:bar)
 => [:bar, 1] 
3.0.2 :003 > h.assoc(:foo)
 => [:foo, 0] 
3.0.2 :004 > h.assoc(:baz)
 => [:baz, 2] 

Returns nil if key key is not found.

3.clear - self : remove all hash entries; returns self.


4.compact - new_hash
Returns a copy of self with all nil-valued entries removed:

3.0.2 :005 > h = {foo:0,bar:nil,baz:2,bat:nil}
 => {:foo=>0, :bar=>nil, :baz=>2, :bat=>nil} 
3.0.2 :006 > h1 = h.compact
 => {:foo=>0, :baz=>2} 
3.0.2 :007 > h1
 => {:foo=>0, :baz=>2} 
 
5.compact!->selft or nil

Returns a copy of self with all nil-valued entries removed:

h = {foo:0,bar:nil,baz:2,bat:nil}
 => {:foo=>0, :bar=>nil, :baz=>2, :bat=>nil} 
3.0.2 :009 > h.compact!
 => {:foo=>0, :baz=>2}
 
 6. compare_by_identity → self

Sets self to consider only identity in comparing keys; two keys are considered the same only if they are the same object; returns self.

By default, these two object are considered to be the same key, so s1 will overwrite s0:

 h = {foo:0,bar:nil,baz:2,bat:nil}
3.0.2 :009 > h.compact!
3.0.2 :010 > s0 = 'x'
3.0.2 :011 > s1 = 'x'
3.0.2 :012 > h = {}
3.0.2 :013 > h.compare_by_identity?
3.0.2 :014 > h[s0] = 0
3.0.2 :015 > h[s1] = 1
3.0.2 :016 > #
3.0.2 :017 > h = {}
 => {} 
3.0.2 :018 > h.compare_by_identity
 => {} 
3.0.2 :019 > h.compare_by_identity?
 => true 
3.0.2 :020 > h[s0] = 0
 => 0 
3.0.2 :021 > h[s1] = 1

7.default : default(key) → object

Returns the default value for the given key. The returned value will be determined either by the default proc or by the default value. See Default Values.

With no argument, returns the current default value:

If key is given, returns the default value for key, regardless of whether that key exists:

h = {}
 => {} 
3.0.2 :023 > h.default
 => nil 
3.0.2 :024 > h = Hash.new{|hash,key|hash[key] = "No key #{key}"}
 => {} 
3.0.2 :025 > h[:foo] = "Hello"
 => "Hello" 
3.0.2 :026 > h.default(:foo)
 => "No key foo" 

8. default = value → object click to toggle source

Sets the default value to value; returns value:

h = {}
 => {} 
3.0.2 :067 > h.default
 => nil 
3.0.2 :068 > h.default = false
 => false 
3.0.2 :069 > h.default 
 => false 

9.default_proc → proc or nil

Returns the default proc for self (see Default Values):


h = {}
 => {} 
3.0.2 :071 > h.default_proc
 => nil 
3.0.2 :072 > h.default_proc = proc {|hash,key|"Default value for #{key}"}
 => #<Proc:0x0000561185b879e0 (irb):72> 
3.0.2 :073 > h.default_proc.class
 => Proc 


10.default_proc = proc → proc click to toggle source

Sets the default proc for self to proc: (see Default Values):

h = {}
 => {} 
3.0.2 :075 > h.default_proc
 => nil 
3.0.2 :076 > h.default_proc = proc {|hash,key|"Default value for #{key}"}
 => #<Proc:0x0000561185da7680 (irb):76> 
3.0.2 :077 > h.default_proc.class
 => Proc 
3.0.2 :078 > h.default_proc = nil
 => nil 
3.0.2 :079 > h.default_proc 
 => nil 

11.delete(key) → value or nil
delete(key) {|key| ... } → object

Deletes the entry for the given key and returns its associated value.

If no block is given and key is found, deletes the entry and returns the associated value:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :081 > h.delete(:bar)
 => 1 
3.0.2 :082 > h
 => {:foo=>0, :baz=>2} 
 
 
 If no block given and key is not found, returns nil.

If a block is given and key is found, ignores the block, deletes the entry, and returns the associated value:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :084 > h.delete(:baz) {|key|raise 'Will never happen'}
 => 2 
3.0.2 :085 > h
 => {:foo=>0, :bar=>1} 

If a block is given and key is not found, calls the block and returns the block's return value:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :087 > h.delete(:nosuch){|key| "key #{key} not found"}
 => "key nosuch not found" 
3.0.2 :088 > h
 => {:foo=>0, :bar=>1, :baz=>2} 
 
12. delete_if {|key, value| ... } → self click to toggle source
delete_if → new_enumerator

If a block given, calls the block with each key-value pair; deletes each entry for which the block returns a truthy value; returns self:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :092 > h.delete_if{|key,value|value>0}
 => {:foo=>0} 

If no block given, returns a new Enumerator:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :096 > e = h.delete_if
 => #<Enumerator: ...> 
3.0.2 :097 > e.each{|key,value|value>0}
 => {:foo=>0} 

13.dig(key, *identifiers) → object click to toggle source

Finds and returns the object in nested objects that is specified by key and identifiers. The nested objects may be instances of various classes. See Dig Methods.

h = {foo:{bar:{baz:2}}}
 => {:foo=>{:bar=>{:baz=>2}}} 
3.0.2 :111 > h.dig(:foo)
 => {:bar=>{:baz=>2}} 
3.0.2 :112 > h.dig(:foo,:bar)
 => {:baz=>2} 
3.0.2 :113 > h.dig(:foo,:bar,:baz)
 => 2 
3.0.2 :114 > h.dig(:foo,:bar,:BAZ)
 => nil 

Nested Hashes and Arrays:

 h = {foo:{bar:[:a,:b,:c]}}
 => {:foo=>{:bar=>[:a, :b, :c]}} 
3.0.2 :116 > h.dig(:foo,:bar,2)
 => :c 
This method will use the default values for keys that are not present:

h = {foo:{bar:{baz:2}}}
3.0.2 :112 > h.dig(:foo,:bar)
3.0.2 :113 > h.dig(:foo,:bar,:baz)
 => nil 
h.default_proc
 => nil 
3.0.2 :122 > h.default_proc = ->(hash,_key){hash}
 => #<Proc:0x0000561185be8c68 (irb):122 (lambda)> 
3.0.2 :123 > h.dig(:hello,:world)
 => {:foo=>{:bar=>[:a, :b, :c]}} 
3.0.2 :124 > h.dig(:hello,:world)
 => {:foo=>{:bar=>[:a, :b, :c]}} 
3.0.2 :125 > h.dig(:hello,:world,:foo,:bar,2)
 => :c 


14. each {|key, value| ... } → self click to toggle source
each_pair {|key, value| ... } → self
each → new_enumerator
each_pair → new_enumerator

#each is an alias for #each_pair.

Calls the given block with each key-value pair; returns self:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :127 > h.each_pair {|key,value|puts "#{key}: #{value}"}
foo: 0
bar: 1
baz: 2
 => {:foo=>0, :bar=>1, :baz=>2} 

Returns a new Enumerator if no block given:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :166 > e = h.each_pair
 => #<Enumerator: ...> 
3.0.2 :167 > h1 = e.each{|key,value|puts "#{key}: #{value}"}
foo: 0
bar: 1
baz: 2
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :168 > h1
 => {:foo=>0, :bar=>1, :baz=>2} 

15. each_key {|key| ... } → self
each_key → new_enumerator

Calls the given block with each key; returns self:

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :174 > h.each_key{|key|puts key}
foo
bar
baz
 => {:foo=>0, :bar=>1, :baz=>2} 

16. each_pair {|key, value| ... } → self click to toggle source
each_pair → new_enumerator

#each is an alias for #each_pair.

Calls the given block with each key-value pair; returns self:


h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :002 > h.each_pair{|key,value|puts "#{key}: #{value}"}
foo: 0
bar: 1
baz: 2
 => {:foo=>0, :bar=>1, :baz=>2} 

h = {foo:0,bar:1,baz:2}
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :011 > e = h.each_pair
 => #<Enumerator: ...> 
3.0.2 :012 > h1 = e.each{|key,value|puts "#{key}:#{value}"}
foo:0
bar:1
baz:2
 => {:foo=>0, :bar=>1, :baz=>2} 
3.0.2 :013 > h1
 => {:foo=>0, :bar=>1, :baz=>2} 
 

17. empty? → true or false click to toggle source

Returns true if there are no hash entries, false otherwise:

{}.empty?
 => true 
3.0.2 :018 > {foo:0,bar:1,baz:2}.empty?
 => false 
 
 




